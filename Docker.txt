
Docker commands : 

1. Get all continers running => docker container ls

2. Get all docker images:  docker images 

3. Get stopped container =>  docker ps --filter "status=exited"

4. resume container => docker start <id> ----> you will get ID from #3  



Get ip address of docker container : 

docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' <name>


##### REDIS 

https://redis.io/docs/latest/operate/oss_and_stack/install/install-stack/docker/

1. docker run -d --name redis-stack-server -p 6379:6379 redis/redis-stack-server:latest

2. Connect to Redis server : docker exec -it redis-stack-server  redis-cli



####### Cassadnra 3 node setup 

export COMPOSE_FILE=docker-compose_2_nodes.yaml  


https://medium.com/@kayvan.sol2/deploying-apache-cassandra-cluster-3-nodes-with-docker-compose-3634ef8345e8

https://medium.com/@kayvan.sol2/deploying-apache-cassandra-cluster-3-nodes-with-docker-compose-3634ef8345e8

<<< Disable Air Off if port 7000 is being used >>>> >


Remove ----> docker rm -f cassandra-3
bring up only one container ---->docker-compose up -d cassandra-3


kpushpad@kamal-ka-MacBook-Pro cassandra % docker exec cassandra-1 nodetool status
Datacenter: my-datacenter-1
===========================
Status=Up/Down
|/ State=Normal/Leaving/Joining/Moving
--  Address     Load        Tokens  Owns (effective)  Host ID                               Rack 
UJ  172.19.0.4  85.1 KiB    16      ?                 7cfb63b6-01ae-46a6-bfb5-00543699bb40  rack1
UN  172.19.0.2  147.88 KiB  16      100.0%            e409ff82-6cb6-40ea-80ec-f94ec9bd6767  rack1
UN  172.19.0.3  85.09 KiB   16      100.0%            327ae91d-8764-4d02-ae41-588007a120d2  rack1

kpushpad@kamal-ka-MacBook-Pro cassandra % 




Sample : 

docker exec -it cassandra-1 cqlsh
Connected to my-cluster at 127.0.0.1:9042
[cqlsh 6.2.0 | Cassandra 5.0.3 | CQL spec 3.4.7 | Native protocol v5]
Use HELP for help.
cqlsh> CREATE KEYSPACE movies 
   ... WITH replication = {
   ...     'class': 'NetworkTopologyStrategy', 
   ...     'my-datacenter-1': 2
   ... };



######## Influx DB 

1. We got all the info frm Chat GPT but we can refer below page:

https://www.influxdata.com/blog/how-to-setup-influxdb-telegraf-and-grafana-on-docker-part-2/

2. Create below two files from chatGpt

kpushpad@kamal-ka-MacBook-Pro influxdb-stack % pwd
/Users/kpushpad/Desktop/docker/influx/influxdb-stack
kpushpad@kamal-ka-MacBook-Pro influxdb-stack % ls -ltr
total 16
-rw-r--r--  1 kpushpad  staff   330 Mar 22 15:16 telegraf.conf
-rw-r--r--  1 kpushpad  staff  1061 Mar 22 17:32 docker-compose.yml
kpushpad@kamal-ka-MacBook-Pro influxdb-stack % 


3. docker compose up -d

kpushpad@kamal-ka-MacBook-Pro influxdb-stack % pwd
/Users/kpushpad/Desktop/docker/influx/influxdb-stack
kpushpad@kamal-ka-MacBook-Pro influxdb-stack % ls -ltr
total 16
-rw-r--r--  1 kpushpad  staff  1002 Mar 22 15:15 docker-compose.yml
-rw-r--r--  1 kpushpad  staff   330 Mar 22 15:16 telegraf.conf

kpushpad@kamal-ka-MacBook-Pro influxdb-stack % docker compose up -d

kpushpad@kamal-ka-MacBook-Pro influxdb-stack % docker container ls  

CONTAINER ID   IMAGE                    COMMAND                  CREATED          STATUS          PORTS                          NAMES
2ebf7e18298b   telegraf:latest          "/entrypoint.sh tele…"   34 seconds ago   Up 33 seconds   8092/udp, 8125/udp, 8094/tcp   telegraf
35f7c9c96d92   influxdb:2.7             "/entrypoint.sh infl…"   34 seconds ago   Up 33 seconds   0.0.0.0:8086->8086/tcp         influxdb
86eb5f4fc08d   grafana/grafana:latest   "/run.sh"                34 seconds ago   Up 33 seconds   0.0.0.0:3000->3000/tcp         grafana
kpushpad@kamal-ka-MacBook-Pro influxdb-stack % 

4.Before you execute 'influx query'  you need to setup 

influx config create --config-name CONFIG_NAME --host-url http://localhost:8086 --org my-org --token new-super-secret-token --active

Token and org is coming from docker compose file. 


5. check . if not set you need pass org and token with every command or we will get 401.

kpushpad@kamal-ka-MacBook-Pro influxdb-stack % influx config list
Active	Name	URL			Org
*	stack	http://localhost:8086	my-org
kpushpad@kamal-ka-MacBook-Pro influxdb-stack % 


6. Connect using v1 


pushpad@kamal-ka-MacBook-Pro influx % influx v1 shell
InfluxQL Shell 2.7.5
Connected to InfluxDB OSS v2.7.11
> 

7. Connect to docker instance if you want. 


kpushpad@kamal-ka-MacBook-Pro influx % docker exec -it influx-influxdb2-1 /bin/bash           
root@758ca6c20867:/# 


8. Sample data download 

   curl https://raw.githubusercontent.com/influxdata/influxdb2-sample-data/master/bird-migration-data/bird-migration.line  --data-binary  --output ./tmp-data

   vi tmp-data

   :setlocal ff=unix and then save to in linux format. 

   import this data to influx using command. 

   kpushpad@kamal-ka-MacBook-Pro influx % influx v1 shell   
   InfluxQL Shell 2.7.5
   Connected to InfluxDB OSS v2.7.11
   > use sample-bucket
   > select * from migration;
   >SELECT * FROM migration ORDER BY time DESC LIMIT 10;


 9.  V2 using influx 

  kpushpad@kamal-ka-MacBook-Pro influx % influx query '
from(bucket: "sample-bucket")
  |> range(start: 0)
  |> filter(fn: (r) => r._measurement == "migration")
  |> group(columns: ["_measurement"])
  |> sort(columns: ["_time"])
  |> limit(n: 1)
'

 (CTL + D) to end it 


10.  Only bring inlfux container not needed usally 
     Bring container up https://docs.influxdata.com/influxdb/v2/install/use-docker-compose/
     Install CLI : https://docs.influxdata.com/influxdb/v2/tools/influx-cli/
     CLI referecne https://songrgg.github.io/operation/influxdb-command-cheatsheet/


11. Down sampling / Aggregation queries / Continuois quries 

kpushpad@kamal-ka-MacBook-Pro influxdb-stack % influx bucket create --name telegraf_ds_15m --org my-org --retention 120h --token new-super-secret-token
ID			Name		Retention	Shard group duration	Organization ID		Schema Type
0681f8c88d6fe63d	telegraf_ds_15m	120h0m0s	24h0m0s			7a236791157d43b2	implicit
kpushpad@kamal-ka-MacBook-Pro influxdb-stack % influx bucket list                                                                                      
ID			Name		Retention	Shard group duration	Organization ID		Schema Type
68b374f97b37c2bc	_monitoring	168h0m0s	24h0m0s			7a236791157d43b2	implicit
8fcf8c250c15408f	_tasks		72h0m0s		24h0m0s			7a236791157d43b2	implicit
df99d092a91c7622	telegraf	infinite	168h0m0s		7a236791157d43b2	implicit
0681f8c88d6fe63d	telegraf_ds_15m	120h0m0s	24h0m0s			7a236791157d43b2	implicit
kpushpad@kamal-ka-MacBook-Pro influxdb-stack % 


kpushpad@kamal-ka-MacBook-Pro influxdb-stack % influx query 
option task = {name: "Downsample CPU", every: 15m}
from(bucket: "telegraf")
  |> range(start: -15m)
  |> filter(fn: (r) => r["_measurement"] == "cpu")
  |> aggregateWindow(every: 15m, fn: mean, createEmpty: false)
  |> to(bucket: "telegraf_ds_15m")



  from(bucket: "telegraf_ds_15m")
  |> range(start: -1h)
  |> filter(fn: (r) => r["_measurement"] == "cpu")
  |> limit(n: 10)


kpushpad@kamal-ka-MacBook-Pro influxdb-stack % influx query      
from(bucket: "telegraf_ds_15m")
  |> range(start: 0) // Scans all data
  |> group(columns: ["_measurement"]) // Groups by measurement
  |> count()
  |> yield(name: "row_counts")
Result: row_counts
Table: keys: [_start, _stop, _measurement]
                   _start:time                      _stop:time     _measurement:string                  _value:int
------------------------------  ------------------------------  ----------------------  --------------------------
1970-01-01T00:00:00.000000000Z  2025-03-23T07:11:47.263761554Z                     cpu                         264
kpushpad@kamal-ka-MacBook-Pro influxdb-stack % 






======> Commands : 



===> 401 / un unauthorized 

kpushpad@kamal-ka-MacBook-Pro influxdb-stack % docker exec -it influxdb /bin/sh
# 
# influx setup --username admin --password admin123 --org my-org --bucket telegraf --token new-super-secret-token --force
User	Organization	Bucket
admin	my-org		telegraf
# 

influx bucket list --org my-org --t new-super-secret-token

influx setup --username admin --password admin123 --org my-org --bucket telegraf --token my-super-secret-token --force




kpushpad@kamal-ka-MacBook-Pro influxdb-stack % influx query 'from(bucket: "telegraf")
  |> range(start: -1h, stop: now())  // Replace with actual time range
  |> filter(fn: (r) => r["_measurement"] == "cpu")
  |> filter(fn: (r) => r["_field"] == "usage_active")
  |> aggregateWindow(every: 10m, fn: mean, createEmpty: false) 
  |> yield(name: "mean")'


kpushpad@kamal-ka-MacBook-Pro influxdb-stack % influx query
import "influxdata/influxdb/schema"

schema.measurements(bucket: "telegraf")
  |> yield(name: "measurements")
Result: measurements
Table: keys: []
         _value:string
----------------------
                   cpu
                  disk
                   mem
                   net
             processes
                system
kpushpad@kamal-ka-MacBook-Pro influxdb-stack % 


kpushpad@kamal-ka-MacBook-Pro influxdb-stack % influx query
from(bucket: "telegraf")
  |> range(start: 0) // Scans all data
  |> group(columns: ["_measurement"]) // Groups by measurement
  |> count()
  |> yield(name: "row_counts")




import "influxdata/influxdb/sample"

option task = {
  name: "Collect air sensor sample data",
  every: 15m,
}

sample.data(set: "airSensor")
    |> to(bucket: "example-bucket")
